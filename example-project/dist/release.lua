--[[

	_           ____        
	| |         |  _ \       
	| |    _   _| |_) |_   _ 
	| |   | | | |  _ <| | | |
	| |___| |_| | |_) | |_| |
	|______\__,_|____/ \__,_|
	
	https://github.com/chaposcripts/lubu	

]]

-- Constants
LUBU_BUNDLED = true;
LUBU_BUILD_DATE = 1736007992;
VERSION = "1.1a";

--[[ Module "sum" (X:\dev\lubu\example-project./src/sum.lua) ]]
package.preload['sum'] = (function()
return function(a, b)
    return a + b;
end
end)

--[[ Module "mul" (X:\dev\lubu\example-project./src/mul.lua) ]]
package.preload['mul'] = (function()
return function(a, b)
    return a * b;
end
end)

-- This function generated by LuBu. Used to load compressed .dll modules
local function LUBU_LOAD_COMPRESSED_DYNAMIC_LIBRARY(moduleName, bytes)
	local tempFileName = moduleName .. ".dll";
	local file = io.open(tempFileName, "wb");
	assert(file, '[LuBu Error] Error loading compressed dynamic library (counld not open file): ' .. tempFileName);
	for _, byte in ipairs(bytes) do
		file:write(string.char(byte));
	end
	file:close();
	local module = require(moduleName);
	os.remove(tempFileName);
	return module;
end

--[[ Module "lfs" (X:\dev\lubu\example-project./src/lfs.dll) ]]
package.preload['lfs'] = LUBU_LOAD_COMPRESSED_DYNAMIC_LIBRARY('lfs', { --[[ Байты дллки (не влезают) ]] })
--[[ Entry Point (main file: "X:\dev\lubu\example-project./src/init.lua") ]]
LUBU_BUNDLED_ENTRY_POINT = (function()
print('Current script directory:', require('lfs').currentdir());
local sum, mul = require('sum'), require('mul');

local a, b, c = 1, 5, 10;
print(sum(a, b));
print(sum(b, c));
print(mul(a, b));
print(mul(c, b));
end);
LUBU_BUNDLED_ENTRY_POINT();